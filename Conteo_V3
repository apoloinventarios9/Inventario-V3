<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Registro de Conteo de Inventario</title>
  
  <!-- Librerías externas -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://unpkg.com/html5-qrcode"></script>
  <script src="https://cdn.jsdelivr.net/npm/read-excel-file@5.x/bundle/read-excel-file.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

  <style>
    body {
      padding: 15px;
      background-color: #f8f9fa;
      min-height: 100vh;
      position: relative;
      font-size: 12px; /* Reducido de 14px */
    }
    
    #mainContent {
      display: none;
    }
    
    .container-fluid {
      max-width: 800px;
      margin: 0 auto;
    }
    
    .footer {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      text-align: center;
      color: #0066cc;
      padding: 8px;
      background-color: rgba(255,255,255,0.9);
      font-size: 0.7rem; /* Reducido de 0.8rem */
      border-top: 1px solid #ddd;
      z-index: 1000;
    }

    .compact-card {
      margin: 10px 0;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .module-section {
      display: none;
    }
    .module-section.active {
      display: block;
    }

    .compact-form .form-group {
      margin-bottom: 0.8rem;
    }

    .history-item {
      padding: 8px;
      font-size: 0.8rem; /* Reducido de 0.9rem */
      border-bottom: 1px solid #ddd;
    }

    .action-buttons {
      position: fixed;
      top: 10px;
      right: 10px;
      z-index: 1000;
    }

    #scannerVideo {
      max-width: 100%;
      height: auto;
    }

    .state-dropdown {
      margin: 10px 0;
    }
    .state-dropdown select {
      width: 100%;
      padding: 5px;
      border-radius: 4px;
      border: 1px solid #ccc;
      font-size: 12px; /* Añadido para consistencia */
    }

    .suggestions {
      position: absolute;
      top: 42px;
      left: 0;
      right: 0;
      background: #fff;
      border: 1px solid #ccc;
      max-height: 200px;
      overflow-y: auto;
      z-index: 1050;
    }
    .suggestion-item {
      padding: 5px 10px;
      cursor: pointer;
      font-size: 12px; /* Añadido para consistencia */
    }
    .suggestion-item:hover {
      background-color: #f1f1f1;
    }

    /* Nuevos estilos para centrado responsive */
    .swal2-popup {
      width: auto !important;
      max-width: 90% !important;
      margin: 0.5rem !important;
      display: flex !important;
      flex-direction: column !important;
      align-items: center !important;
      font-size: 12px; /* Reducido de 14px */
    }

    .swal2-content {
      width: 100% !important;
      max-width: 300px !important;
    }

    .swal2-input {
      width: 100% !important;
      max-width: 280px !important;
      margin: 0.5rem auto !important;
      font-size: 12px; /* Reducido de 14px */
    }

    @media (max-width: 480px) {
      .swal2-popup {
        width: 95% !important;
        font-size: 12px !important; /* Reducido de 14px */
      }
      
      .swal2-input {
        font-size: 12px !important; /* Reducido de 14px */
        padding: 0.5rem !important;
      }
    }

    .swal2-input-group {
      padding: 0 15px;
      width: 100%;
      box-sizing: border-box;
    }

    /* Ajustes para elementos de texto específicos */
    h4 {
      font-size: 1.2rem; /* Reducido de 1.4rem */
    }
    
    .nav-link {
      font-size: 12px; /* Reducido de 14px */
    }
    
    .form-control, .form-control-sm {
      font-size: 12px; /* Reducido de 14px */
    }
    
    .btn {
      font-size: 12px; /* Reducido de 14px */
    }
    
    small, .small {
      font-size: 10px; /* Reducido de 12px */
    }
    
    .text-muted {
      font-size: 10px; /* Reducido de 12px */
    }
    
    /* Estilos para los nuevos recuadros de estado y stock */
    .status-container {
      display: flex;
      gap: 5px;
      margin-top: 5px;
      margin-bottom: 5px;
    }
    
    .status-box {
      padding: 2px 5px;
      border-radius: 3px;
      font-size: 9.5px; /* Reducido en 0.5px */
      font-weight: bold;
    }
    
    .active-status {
      background-color: #d4edda;
      color: #155724;
    }
    
    .inactive-status {
      background-color: #f8d7da;
      color: #721c24;
    }
    
    .stock-status {
      background-color: #d4edda;
      color: #155724;
    }
    
    .no-stock-status {
      background-color: #f8d7da;
      color: #721c24;
    }
  </style>
</head>
<body>

<div id="mainContent">
  <!-- Modal para escáner -->
  <div class="modal fade" id="scannerModal" tabindex="-1" role="dialog" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title" style="font-size: 14px;">Escanear código</h5> <!-- Reducido de 16px -->
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                  </button>
              </div>
              <div class="modal-body text-center">
                  <div id="qr-reader" style="width: 100%;"></div>
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal" style="font-size: 12px;">Cerrar</button> <!-- Reducido de 14px -->
              </div>
          </div>
      </div>
  </div>

  <div class="action-buttons btn-group-vertical">
      <button class="btn btn-info btn-sm mb-1" onclick="checkPermission(downloadHistory)" style="font-size: 12px;">Descargar</button> <!-- Reducido de 14px -->
      <button class="btn btn-danger btn-sm" onclick="checkPermission(deleteHistory)" style="font-size: 12px;">Borrar</button> <!-- Reducido de 14px -->
  </div>

  <div class="container-fluid">
      <h4 class="mb-3 text-center">Control de Inventarios</h4>
      
      <ul class="nav nav-tabs mb-2">
          <li class="nav-item">
              <a class="nav-link active" onclick="checkPermission(() => showModule('import', event))">Importar</a>
          </li>
          <li class="nav-item">
              <a class="nav-link" onclick="checkPermission(() => showModule('conteo', event))">Registrar</a>
          </li>
      </ul>

      <div id="importModule" class="module-section active">
          <div class="compact-card card">
              <div class="card-body p-2">
                  <input type="file" id="excelFile" class="form-control form-control-sm" accept=".xlsx, .xls">
              </div>
          </div>
      </div>

      <div id="conteoModule" class="module-section">
          <div class="compact-card card">
              <div class="card-body p-2">
                  <div style="position: relative;">
                    <div class="input-group mb-2">
                        <input type="text" id="search" class="form-control form-control-sm" placeholder="Buscar producto..." disabled>
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary btn-sm" type="button" id="scanButton">
                                <i class="fas fa-camera"></i>
                            </button>
                        </div>
                    </div>
                    <div id="suggestions" class="suggestions" style="display:none;"></div>
                  </div>

                  <div id="product-info" class="mb-2" style="display:none;">
                      <small class="text-muted d-block">Código: <span id="product-code"></span></small>
                      <small class="text-muted d-block">Nombre: <span id="product-name"></span></small>
                      <div class="status-container">
                          <span id="product-status" class="status-box"></span>
                          <span id="product-stock" class="status-box"></span>                        
                      </div>
                  </div>

                  <div class="state-dropdown">
                      <select id="state">
                          <option value="Buen estado" selected>Buen estado</option>
                          <option value="Vencido">Vencido</option>
                          <option value="Roto">roto</option>
                          <option value="Incompleto">incompleto</option>
                          <option value="Otros">otros</option>
                      </select>
                  </div>

                  <form id="countForm" class="compact-form">
                      <div class="row">
                          <div class="col-6">
                              <input type="number" id="quantity" class="form-control form-control-sm" placeholder="Cantidad" required>
                          </div>
                          <div class="col-6">
                              <input type="text" id="location" class="form-control form-control-sm" placeholder="Ubicación" required>
                          </div>
                      </div>
                      
                      <textarea id="notes" class="form-control form-control-sm mt-1" rows="2" placeholder="Notas"></textarea>
                      
                      <div class="row mt-2">
                          <div class="col-6">
                              <button type="button" class="btn btn-success btn-sm btn-block" onclick="checkPermission(saveCount)">Guardar</button>
                          </div>
                          <div class="col-6">
                              <button type="button" class="btn btn-secondary btn-sm btn-block" onclick="clearForm()">Cancelar</button>
                          </div>
                      </div>
                  </form>

                  <div id="history-list" class="mt-3"></div>
              </div>
          </div>
      </div>
  </div>

  <!-- Pie de página -->
  <div class="footer">
      Desarrollado por: © 2025 Miguel Fajardo - Analista de Inventarios
  </div>
</div>

<script>
// Sistema de Autenticación
const validUsers = {
  'Admin': { password: 'Admin2025*', isAdmin: true },
  'conteo': { password: '123456', isAdmin: false }
};

const checkLicense = () => new Date() <= new Date('2026-02-28T23:59:00');

async function authenticateUser() {
  const { value: credentials } = await Swal.fire({
    title: 'Inicio de sesión',
    html: `
      <div class="swal2-input-group">
        <input id="username" class="swal2-input" placeholder="Usuario">
        <input id="password" type="password" class="swal2-input" placeholder="Contraseña">
      </div>
    `,
    footer: '© 2025 Miguel Fajardo - Analista de Inventarios',
    focusConfirm: false,
    preConfirm: () => ({
      username: document.getElementById('username').value,
      password: document.getElementById('password').value
    }),
    customClass: {
      container: 'swal2-center-container',
      popup: 'swal2-center-popup'
    }
  });

  if (!credentials) return false;

  const user = validUsers[credentials.username];
  if (user && user.password === credentials.password) {
    if (credentials.username === 'conteo' && !checkLicense()) {
      await Swal.fire('Licencia vencida', 'Contacte al administrador', 'error');
      return false;
    }
    sessionStorage.setItem('authUser', credentials.username);
    return true;
  }
  Swal.fire('Error', 'Credenciales inválidas', 'error');
  return false;
}

// Inicialización
(async () => {
  let authUser = sessionStorage.getItem('authUser');
  
  if (!authUser && !(await authenticateUser())) {
    document.body.innerHTML = '<h1 class="text-center mt-5">Acceso no autorizado</h1>';
    return;
  }
  
  if (authUser === 'conteo' && !checkLicense()) {
    await Swal.fire('Licencia vencida', 'Contacte al administrador', 'error');
    sessionStorage.removeItem('authUser');
    window.location.reload();
    return;
  }
  
  document.getElementById('mainContent').style.display = 'block';
  if (localStorage.getItem('inventoryProducts')) {
    $('#search').prop('disabled', false);
  }
})();

// Sistema de permisos
function checkPermission(callback) {
  const user = sessionStorage.getItem('authUser');
  if (user === 'conteo' && !checkLicense()) {
    Swal.fire('Licencia vencida', 'Contacte al administrador', 'error');
    return;
  }
  callback();
}

// Variables globales
let products = JSON.parse(localStorage.getItem('inventoryProducts')) || [];
let counts = JSON.parse(localStorage.getItem('inventoryCounts')) || [];
let currentEditIndex = -1;
let html5QrCode = null;
const MAX_SUGGESTIONS = 10;
let cameraPermissionGranted = false;

// Funciones del sistema de inventario
function showModule(moduleId, event) {
  document.querySelectorAll('.module-section').forEach(m => m.classList.remove('active'));
  document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
  document.getElementById(moduleId + 'Module').classList.add('active');
  event.target.classList.add('active');
}

document.getElementById('excelFile').addEventListener('change', function(e) {
  const file = e.target.files[0];
  readXlsxFile(file).then((rows) => {
    products = rows.slice(1).map(row => ({
      barcode: row[0]?.toString().trim() || '',
      code: row[1]?.toString().trim() || '',
      name: row[2]?.toString().trim() || 'Sin nombre',
      measure: row[3]?.toString().trim() || 'UND', // Nueva columna MEDIDA
      status: parseInt(row[4]) || 0, // Nueva columna ESTADO (1=Activo, 0=Inactivo)
      stock: parseInt(row[5]) || 0 // Nueva columna STOCK (1=Con Stock, 0=Sin Stock)
    })).filter(p => p.code);
    
    localStorage.setItem('inventoryProducts', JSON.stringify(products));
    $('#search').prop('disabled', false);
    Swal.fire({
      title: 'Éxito',
      text: `Se importaron ${products.length} productos`,
      icon: 'success',
      confirmButtonText: 'Aceptar'
    }).then(() => {
      $('#search').focus();
      showModule('conteo', { target: document.querySelector("a.nav-link:not(.active)") });
    });
  }).catch(error => {
    Swal.fire('Error', 'Error al importar el archivo', 'error');
    console.error('Error:', error);
  });
});

function saveCount() {
  const productCode = document.getElementById('product-code').textContent;
  const quantity = document.getElementById('quantity').value;
  const location = document.getElementById('location').value;
  const notes = document.getElementById('notes').value;
  const state = document.getElementById('state').value;
  const productInfo = document.getElementById('product-info');

  if (!quantity || !location || !productCode || productInfo.style.display === 'none') {
    Swal.fire('Error', 'Complete los campos obligatorios', 'error');
    return;
  }

  const productExists = products.some(p => p.code === productCode);
  if (!productExists) {
    Swal.fire('Error', 'El producto no está en la lista importada', 'error');
    return;
  }

  if ((state === 'Otros' || productCode === '1010101010101') && !notes) {
    Swal.fire('Error', 'El campo de notas es obligatorio', 'error');
    return;
  }

  const product = products.find(p => p.code === productCode);
  const count = {
    productCode,
    productName: product.name, // Añadido nombre del producto
    productMeasure: product.measure, // Añadido unidad de medida
    quantity,
    location,
    notes,
    state,
    timestamp: new Date().toISOString()
  };

  if (currentEditIndex > -1) {
    counts[currentEditIndex] = count;
    currentEditIndex = -1;
  } else {
    counts.push(count);
  }
  
  localStorage.setItem('inventoryCounts', JSON.stringify(counts));
  loadHistory(productCode);
  clearForm();
  Swal.fire('Éxito', 'Conteo guardado correctamente', 'success');
}

function loadHistory(productCode) {
  const history = counts
    .map((count, index) => ({ ...count, originalIndex: index }))
    .filter(c => c.productCode === productCode);
  const historyList = document.getElementById('history-list');
  historyList.innerHTML = '';
  history.forEach((c) => {
    const item = document.createElement('div');
    item.className = 'history-item';
    item.innerHTML = `
      <p class="mb-1"><strong>Cantidad:</strong> ${c.quantity}</p>
      <p class="mb-1"><strong>Ubicación:</strong> ${c.location}</p>
      <p class="mb-1"><strong>Estado:</strong> ${c.state}</p>
      ${c.notes ? `<p class="mb-1"><strong>Notas:</strong> ${c.notes}</p>` : ''}
      <p class="text-muted small">${new Date(c.timestamp).toLocaleString('es-PE')}</p>
      <button class="btn btn-sm btn-primary edit-btn" onclick="editCount('${c.productCode}', ${c.originalIndex})">
        Editar
      </button>
    `;
    historyList.appendChild(item);
  });
}

function editCount(productCode, index) {
  if (document.getElementById('quantity').value || document.getElementById('location').value || document.getElementById('notes').value) {
    Swal.fire({
      title: '¿Estás seguro?',
      text: 'Tienes cambios no guardados. ¿Deseas continuar?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sí, continuar',
      cancelButtonText: 'No, cancelar'
    }).then((result) => {
      if (result.isConfirmed) proceedEdit(index);
    });
  } else {
    proceedEdit(index);
  }
}

function proceedEdit(index) {
  if (index < 0 || index >= counts.length) return;
  const count = counts[index];
  currentEditIndex = index;
  document.getElementById('quantity').value = count.quantity;
  document.getElementById('location').value = count.location;
  document.getElementById('notes').value = count.notes;
  document.getElementById('state').value = count.state;
}

function clearForm() {
  document.getElementById('quantity').value = '';
  document.getElementById('location').value = '';
  document.getElementById('notes').value = '';
  document.getElementById('state').value = 'Buen estado';
  currentEditIndex = -1;
  document.getElementById('search').value = '';
  document.getElementById('product-info').style.display = 'none';
  document.getElementById('suggestions').innerHTML = '';
  document.getElementById('suggestions').style.display = 'none';
}

function downloadHistory() {
  if (counts.length === 0) {
    Swal.fire('Advertencia', 'No hay conteos para descargar', 'warning');
    return;
  }

  Swal.fire({
    title: 'Ingrese su nombre y apellidos',
    html: `
      <div class="swal2-input-group">
        <input id="userName" class="swal2-input" placeholder="Nombre">
        <input id="userLastName" class="swal2-input" placeholder="Apellidos">
      </div>
    `,
    focusConfirm: false,
    preConfirm: () => {
      const userName = document.getElementById('userName').value.trim();
      const userLastName = document.getElementById('userLastName').value.trim();
      if (!userName || !userLastName) {
        Swal.showValidationMessage('Complete ambos campos');
      }
      return { userName, userLastName };
    },
    customClass: {
      container: 'swal2-center-container',
      popup: 'swal2-center-popup'
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const { userName, userLastName } = result.value;
      const now = new Date();
      const formattedDate = now.toLocaleString('es-PE', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }).replace(/[/:,]/g, '-').replace(/\s/g, '_');

      const fileName = `${userName}_${userLastName}_${formattedDate}.xlsx`;
      const worksheetData = counts.map(count => ({
        'Código': count.productCode,
        'Nombre': count.productName, // Añadido nombre del producto
        'Unidad de Medida': count.productMeasure, // Añadido unidad de medida
        'Cantidad': count.quantity,
        'Ubicación': count.location,
        'Estado': count.state,
        'Notas': count.notes || '',
        'Fecha': new Date(count.timestamp).toLocaleString('es-PE')
      }));

      const worksheet = XLSX.utils.json_to_sheet(worksheetData);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Historial');
      XLSX.writeFile(workbook, fileName);
    }
  });
}

function deleteHistory() {
  Swal.fire({
    title: 'Ingrese la clave',
    input: 'password',
    inputAttributes: { autocapitalize: 'off' },
    showCancelButton: true,
    confirmButtonText: 'Borrar',
    cancelButtonText: 'Cancelar',
    preConfirm: (clave) => {
      if (clave !== '0000') {
        Swal.showValidationMessage('Clave incorrecta');
      }
    },
    customClass: {
      container: 'swal2-center-container',
      popup: 'swal2-center-popup'
    }
  }).then((result) => {
    if (result.isConfirmed) {
      counts = [];
      localStorage.removeItem('inventoryCounts');
      Swal.fire('Éxito', 'Todos los conteos han sido borrados', 'success');
      const prodCode = document.getElementById('product-code').textContent;
      if (prodCode) loadHistory(prodCode);
    }
  });
}

function debounce(func, wait) {
  let timeout;
  return function(...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}

function filterProducts() {
  const query = document.getElementById('search').value.trim().toLowerCase();
  const suggestionsDiv = document.getElementById('suggestions');
  suggestionsDiv.innerHTML = '';
  
  if (!query) {
    suggestionsDiv.style.display = 'none';
    document.getElementById('product-info').style.display = 'none';
    return;
  }

  const results = products.filter(p =>
    p.barcode.toLowerCase().includes(query) ||
    p.code.toLowerCase().includes(query) ||
    p.name.toLowerCase().includes(query)
  ).slice(0, MAX_SUGGESTIONS);

  if (results.length === 0) {
    suggestionsDiv.innerHTML = '<div class="suggestion-item text-muted">Producto no encontrado</div>';
    suggestionsDiv.style.display = 'block';
    return;
  }

  results.forEach(product => {
    const div = document.createElement('div');
    div.className = 'suggestion-item';
    div.textContent = `${product.code} - ${product.name}`;
    div.onclick = () => selectProduct(product);
    suggestionsDiv.appendChild(div);
  });
  suggestionsDiv.style.display = 'block';
}

function selectProduct(product) {
  if (!product || product.name === 'Producto no encontrado') {
    document.getElementById('product-info').style.display = 'none';
    Swal.fire('Error', 'El producto no está en la lista', 'error');
    return;
  }
  
  document.getElementById('search').value = product.code;
  document.getElementById('product-code').textContent = product.code;
  document.getElementById('product-name').textContent = product.name;
  
  // Actualizar los nuevos campos de estado y stock
  const statusBox = document.getElementById('product-status');
  const stockBox = document.getElementById('product-stock');
  
  // Configurar estado (1=Activo, 0=Inactivo)
  if (product.status === 1) {
    statusBox.textContent = 'ACTIVO';
    statusBox.className = 'status-box active-status';
  } else {
    statusBox.textContent = 'INACTIVO';
    statusBox.className = 'status-box inactive-status';
  }
  
  // Configurar stock (1=Con Stock, 0=Sin Stock)
  if (product.stock === 1) {
    stockBox.textContent = 'CON STOCK';
    stockBox.className = 'status-box stock-status';
  } else {
    stockBox.textContent = 'SIN STOCK';
    stockBox.className = 'status-box no-stock-status';
  }
  
  
  document.getElementById('product-info').style.display = 'block';
  document.getElementById('suggestions').innerHTML = '';
  document.getElementById('suggestions').style.display = 'none';
  loadHistory(product.code);
}

document.getElementById('search').addEventListener('input', debounce(filterProducts, 300));

document.addEventListener('click', function(e) {
  if (!document.getElementById('search').contains(e.target)) {
    document.getElementById('suggestions').style.display = 'none';
  }
});

$(document).ready(() => {
  if (products.length > 0) {
    $('#search').prop('disabled', false);
  }

  document.getElementById('scanButton').addEventListener('click', async function() {
    if (!cameraPermissionGranted) {
      try {
        await navigator.mediaDevices.getUserMedia({ video: true });
        cameraPermissionGranted = true;
      } catch (error) {
        Swal.fire('Error', 'Permiso de cámara denegado', 'error');
        return;
      }
    }
    $('#scannerModal').modal('show');
  });

  $('#scannerModal').on('shown.bs.modal', function() {
    const qrRegionId = "qr-reader";
    if (!html5QrCode) {
      html5QrCode = new Html5Qrcode(qrRegionId);
    }
    const config = { fps: 10, qrbox: 250 };
    html5QrCode.start({ facingMode: "environment" }, config, (decodedText) => {
      const product = products.find(p => p.barcode === decodedText || p.code === decodedText);
      if (!product) {
        Swal.fire('Error', 'Producto no encontrado', 'error');
      } else {
        document.getElementById('search').value = product.code;
        selectProduct(product);
      }
      $('#scannerModal').modal('hide');
    }).catch((error) => {
      console.error('Error al iniciar el escáner:', error);
      Swal.fire('Error', 'Error al iniciar el escáner', 'error');
    });
  });

  $('#scannerModal').on('hidden.bs.modal', function() {
    if (html5QrCode) {
      html5QrCode.stop().catch((error) => {
        console.error('Error al detener el escáner:', error);
      });
    }
  });
});
</script>

</body>
</html>
